
struct unit_graph {
  units : list(unit)
  arcs_from_to : list(tup2(u64, u64))
}

struct vert_flag {
  complete : bool
  active : bool
}

struct unit {
  path : string
  handle : option(module_handle)
  dirty : bool
}

fun unit_graph() {
  unit_graph.new(list(), list())
}

fun print(u : unit) {
  print(u.path)
}

fun print(g : unit_graph) {
  println("unit_graph {")
  println("  units: {")
  for i in range(0, g.units.len() as i64) {
    print("    "); print(i); print(" - ")
    println(g.units[i].path)
  }
  println("  }")
  print("  arcs_from_to: "); println(g.arcs_from_to)
  println("}")
}

fun add_unit(g : unit_graph, path : string, dependencies : array(u64)) => u64 {
  let new_unit_id = g.units.len()
  for unit_id in dependencies {
    g.arcs_from_to.add(tup(new_unit_id, unit_id))
  }
  g.units.add(unit.new(path, none(), false))
  new_unit_id
}

fun find_ancestors_topological(g : unit_graph, ordering : list(u64), visited : list(bool), unit : u64) {
  if visited[unit] {
    return
  }
  visited[unit] = true
  for arc in g.arcs_from_to {
    if arc.v0 == unit {
      find_ancestors_topological(g, ordering, visited, arc.v1)
    }
  }
  ordering.add(unit)
}

fun find_descendants_topological(g : unit_graph, ordering : list(u64), visited : list(bool), unit : u64) {
  if visited[unit] {
    return
  }
  visited[unit] = true
  ordering.add(unit)
  for arc in g.arcs_from_to {
    if arc.v1 == unit {
      find_descendants_topological(g, ordering, visited, arc.v0)
    }
  }
}

fun topological_ordering(g : unit_graph) {
  let visited = list()
  let ordering = list()
  for u in g.units { visited.add(false) }
  for i in range(0, g.units.len()) {
    find_ancestors_topological(g, ordering, visited, i)
  }
  ordering
}

fun reload(g : unit_graph, unit : u64) {
  let visited = list()
  let ordering = list()
  for u in g.units { visited.add(false) }
  find_descendants_topological(g, ordering, visited, unit)
  ordering
}

static g = unit_graph()

let prelude = g.add_unit("code/core/prelude.code", [])
let list = g.add_unit("code/core/list.code", [])
let sdl2 = g.add_unit("code/sdl2.code", [prelude])
let window = g.add_unit("code/tetris/window.code", [prelude, sdl2])
let events = g.add_unit("code/tetris/events.code", [prelude, list, sdl2])

static watcher = create_watcher(100)

print(g)

fun load_unit(g : unit_graph, unit : u64) => option(module_handle) {
  let path = g.units[unit].path
  let h = get_module(path)
  if h.is_some {
    g.units[unit].handle = h
    return h
  }
  let deps = list()
  for arc in g.arcs_from_to {
    if arc.v0 == unit {
      deps.add(g.units[arc.v1].handle.unwrap())
    }
  }
  let h = load_module(path, deps.as_array())
  if !h.is_some { return none() }
  g.units[unit].handle = h
  h
}



// for u in g.units {
//   print("Build ")
//   println(u.path)
//   watcher.watch_file(u.path)
//   let h = {
//     let h = get_module("code/core/list.code")
//     if !h.is_some {
//       h.val
//     }
//   }
//   let sdl2 = load_module("code/sdl2.code", [prelude]).unwrap()
// }

// fun watch() {
//   while true {
//     let path = watcher.poll_watcher_event()
//     if path.is_some {
//       let path = path.val

//       // handle event
//       print(path); println(" changed!")
//     }
//     else { break }
//   }
// }
