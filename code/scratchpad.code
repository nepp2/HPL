

struct tick { tick }

fun live_gameloop(game_module_name) {

  let width = 400
  let height = 600

  let view = create_sdl_view(width, height)
  set_window_pos(view, 10, ())

  let watcher = create_watcher()
  watch_module(watcher, game_module_name)

  let events = []

  let paused = false

  while true {
    // load the game
    import_module_fresh(game_module_name)

    // initialise the module and update it on past events
    let state = init(view, width, height)
    for e in events {
      update(state, e)
    }

    while true {
      let time = time_now()

      // check the watcher for code changes
    	let e = poll_event(watcher)
    	if e == game_module_name {
        break
      }

      // consume sdl events
      while true {
        let e = poll_event(view)
        if e == () {
          break
        }
        let t = type_name(e)
        if t == "sdl_event_quit" {
          return
        }
        if t == "sdl_event_keydown" {
          if e.key == "Escape" {
            return
          }
        }
        if t == "sdl_event_window" {
          if e.event == "FocusLost" {
            paused = true
          }
          else if e.event == "FocusGained" {
            paused = false
          }
        }
        if !paused {
          add(events, e)
          update(state, e)
        }
      }
      if !paused {
        // send a normal tick event
        let t = tick(tick: ())
        add(events, t)
        update(state, t)
      }

      // draw the game
      render(view, state)

      // sleep until 
      let elapsed = time_since(time)
      let millis = 1000/60
      let sleep_time = max(millis - elapsed, 0)
      sleep(sleep_time)
    }
  }
}

live_gameloop("tetris_live")
