
struct colour { r, g, b, a }

struct tetronimo { tiles, colour }

struct vec2 { x , y }

fun set_color(view, c : array) {
  set_draw_color(view, c[0], c[1], c[2], c[3])
}

fun next_tetronimo(game, grid_width){
  if len(game.tetronimo_bag) == 0 {
    for i in range(0, 2) {
      for i in range(0, len(game.tetronimos)) {
        add(game.tetronimo_bag, i)
      }
    }
  }
  let tets = len(game.tetronimo_bag)
  let i = next_rand(game.rng) * tets
  let next_tet = game.tetronimo_bag[i]
  game.tetronimo_bag[i] = game.tetronimo_bag[tets-1]
  pop(game.tetronimo_bag)
  game.tet_index = next_tet
  init_tetronimo_state(game, grid_width)
}

fun shape_size(shape){
  sqrt(len(shape))
}

fun rotate_90(shape){
  let size = shape_size(shape)
  let s = []
  for i in range(0, size * size) {
    let y = floor(i / size)
    let x = i % size
    let i = (size - 1 - x) * size + y
    add(s, shape[i])
  }
  s
}

fun init(view, width, height) {
  let shape_l1 =
    [ 0, 1, 0,
      0, 1, 0,
      0, 1, 1 ]

  let shape_l2 =
    [ 0, 1, 0,
      0, 1, 0,
      1, 1, 0 ]

  let shape_bar =
    [ 0, 1, 0, 0,
      0, 1, 0, 0,
      0, 1, 0, 0,
      0, 1, 0, 0 ]

  let shape_z =
    [ 0, 0, 0,
      1, 1, 0,
      0, 1, 1 ]

  let shape_s =
    [ 0, 0, 0,
      0, 1, 1,
      1, 1, 0 ]

  let shape_square =
    [ 1, 1,
      1, 1 ]

  let shape_T =
    [ 0, 1, 0,
      1, 1, 1,
      0, 0, 0 ]

  let p = palette(
    red: [255, 0, 50, 255],
    green: [0, 255, 0, 255],
    blue: [50, 100, 255, 255],
    sky_blue: [50, 200, 255, 255],
    orange: [255, 150, 50, 255],
    yellow: [255, 200, 0, 255],
    magenta: [255, 80, 255, 255],
  )

  let colours = [
    shape_l1, p.orange,
    shape_l2, p.blue,
    shape_bar, p.sky_blue,
    shape_z, p.red,
    shape_s, p.green,
    shape_square, p.yellow,
    shape_T, p.magenta,
  ]

  let tetronimos = {
    let ts = []
    for i in range(0, len(colours)/2) {
      let c = colours[i*2 + 1]
      let s1 = colours[i*2]
      let s2 = rotate_90(s1)
      let s3 = rotate_90(s2)
      let s4 = rotate_90(s3)
      let t = tetronimo(
        tiles: [s1, s2, s3, s4],
        colour: c)
      add(ts, t)
    }
    ts
  }

  let config = config(
    tile_size: 25,
    rx: 40,
    ry: 40,
    grid_height: 20,
    grid_width: 10,       
  )

  let grid = []
  for i in range(0, config.grid_width * config.grid_height) {
    add(grid, ())
  }
  let game =
    game(
      config: config,
      orientation: 0,
      tet_index: 0,
      pos_x: 0,
      pos_y: 0,
      ticks_per_drop: 200,
      tick_count: 0,
      grid: grid,
      tetronimos: tetronimos,
      tetronimo_bag: [],
      rng: random_generator(),
      palette: p,
    )
  next_tetronimo(game, config.grid_width)

  game
}

fun draw_tetronimo(
  view, shape, colour, size,
  xpos, ypos, xoffset, yoffset)
{
  set_color(view, colour)
  let shape_size = shape_size(shape)
  for y in range(0, shape_size) {
    for x in range(0, shape_size) {
      let v = shape[x + y * shape_size]
      if v == 1 {
        fill_rect(
          view,
          size * (x + xpos) + xoffset,
          size * (y + ypos) + yoffset,
          size, size)
      }
    }    
  }
}

fun contact_type(grid, grid_width, grid_height, shape, pos_x, pos_y){
  let shape_size = shape_size(shape)
  for y in range(0, shape_size) {
    for x in range(0, shape_size) {
      if shape[x + y * shape_size] == 1 {
        let xpos = x + pos_x
        let ypos = y + pos_y
        if xpos < 0 {
          return "left"
        }
        if xpos >= grid_width {
          return "right"
        }
        if ypos >= grid_height {
          return "bottom"
        }
        if ypos >= 0 {
          let i = xpos + ypos * grid_width
          if grid[i] != () {
            return "overlap"
          }
        }
      }
    }
  }
  return ()
}

fun check_contact(grid, grid_width, grid_height, shape, pos_x, pos_y){
  let c = contact_type( grid, grid_width, grid_height, shape, pos_x, pos_y)
  c != ()
}

fun draw_all_shapes(){
  for i in range(0, len(all_shapes)) {
    for j in range(0, 4) {
      let s = all_shapes[i]
      draw_tetronimo(
        view, s.tiles[j], s.colour,
        20, 1 + j * 4, 1 + i * 5)
    }
  }
}

fun draw_background_grid(view, width, height, gap){
  for x in range(0, width/gap) {
    draw_line(view, x * gap, 0, x * gap, height)
  }
  for y in range(0, height/gap) {
    draw_line(view, 0, y * gap, width, y * gap)
  }
}

fun init_tetronimo_state(game, grid_width) {
  game.pos_y = 0
  game.tick_count = 0
  game.orientation = 0
  let tet = game.tetronimos[game.tet_index]
  let shape = tet.tiles[game.orientation]
  let half_size = floor(shape_size(shape) / 2)
  game.pos_x = grid_width/2 - half_size
}

fun blit(game, shape, colour, grid_width) {
  let shape_size = shape_size(shape)
  for y in range(0, shape_size) {
    for x in range(0, shape_size) {
      if shape[x + y * shape_size] == 1 {
        let xpos = x + game.pos_x
        let ypos = y + game.pos_y
        let i = xpos + ypos * grid_width
        game.grid[i] = colour
      }
    }
  }
}

fun min(a, b) {
  if a < b { a} else { b }
}

fun max(a, b) {
  if a > b { a} else { b }
}

fun check_line(grid, y, grid_width) {
  let i = y * grid_width
  for i in range(i, i + grid_width) {
    if grid[i] == () {
      return false
    }
  }
  return true
}

fun erase_lines(grid, y, shape_size, grid_width, grid_height) {
  for y in range(y, min(y + shape_size, grid_height)) {
    if check_line(grid, y, grid_width) {
      let end = (y + 1) * grid_width
      for i in range(1, (end + 1) - grid_width) {
        grid[end - i] = grid[(end - i) - grid_width]
      }
      for i in range(0, grid_width) {
        grid[i] = ()
      }
    }
  }
}

fun move_horizontal(game, grid_width, grid_height, shape, offset) {
  let new_x = game.pos_x + offset
  let c = check_contact(
    game.grid, grid_width, grid_height,
    shape, new_x, game.pos_y)
  if !c {
    game.pos_x = new_x
  }
}

fun move_down(game, shape, colour, grid_width, grid_height) {
  let new_y = game.pos_y + 1
  game.tick_count = 0
  let c = check_contact(
    game.grid, grid_width, grid_height,
    shape, game.pos_x, new_y)
  if c {
    blit(game, shape, colour, grid_width)
    erase_lines(
      game.grid, game.pos_y, shape_size(shape),
      grid_width, grid_height)
    game.pos_x = grid_width/2 - 2
    game.pos_y = 0
    game.tick_count = 0
    game.orientation = 0
    next_tetronimo(game, grid_width)
    true
  }
  else {
    game.pos_y = new_y
    false
  }
}

fun rotate(game, grid_width, grid_height) {
  game.orientation = (game.orientation + 1) % 4
  let tet = game.tetronimos[game.tet_index]
  let shape = tet.tiles[game.orientation]
  while true {
    let c = contact_type(
      game.grid, grid_width, grid_height,
      shape, game.pos_x, game.pos_y)
    if c == () {
      break
    }
    else if c == "left" {
      game.pos_x = game.pos_x + 1
    }
    else if c == "right" {
      game.pos_x = game.pos_x - 1
    }
    else {
      // overlap or bottom
      game.pos_y = game.pos_y - 1
    }
  }
}

fun update_tick(game) {
  let tet = tetronimos[game.tet_index]
  let shape = tet.tiles[game.orientation]

  game.tick_count = game.tick_count + 1
  if game.tick_count >= game.ticks_per_drop {
    move_down(game, shape, tet.colour, grid_width, grid_height)
  }
}

fun update(game, e) {
  let tet = game.tetronimos[game.tet_index]
  let shape = tet.tiles[game.orientation]
  let c = game.config
  let grid_width = c.grid_width
  let grid_height = c.grid_height
  let t = type_name(e)
  if t == "sdl_event_keydown" {
    if e.key == "Up" {
      rotate(game, grid_width, grid_height)
    }
    if e.key == "Left" {
      move_horizontal(
        game, grid_width, grid_height, shape, -1)
    }
    if e.key == "Right" {
      move_horizontal(
        game, grid_width, grid_height, shape, 1)
    }
    if e.key == "Down" {
      move_down(game, shape, tet.colour, grid_width, grid_height)
    }
    if e.key == "Space" {
      while true {
        if move_down(game, shape, tet.colour, grid_width, grid_height) {
          break
        }
      }
    }
  }
  else if t == "tick" {
    game.tick_count = game.tick_count + 1
    if game.tick_count >= game.ticks_per_drop {
      move_down(game, shape, tet.colour, grid_width, grid_height)
    }
  }
}

fun render(view, game) {
  set_draw_color(view, 40, 40, 40, 255)
  clear(view)
  set_draw_color(view, 120, 120, 120, 255)
  let c = game.config
  let rx = c.rx
  let ry = c.ry
  let tile_size = c.tile_size
  let grid_width = c.grid_width
  let grid_height = c.grid_height
  draw_rect(view, rx, ry,
    tile_size * grid_width,
    tile_size * grid_height)

  let tet = game.tetronimos[game.tet_index]
  let shape = tet.tiles[game.orientation]

  for y in range(0, grid_height) {
    for x in range(0, grid_width) {
      let i = y * grid_width + x
      let colour = game.grid[i]
      if colour != () {
        set_color(view, colour)
        fill_rect(
          view,
          tile_size * x + rx,
          tile_size * y + ry,
          tile_size, tile_size)
      }
    }
  }

  let ghost_y = game.pos_y
  while true {
    let new_y = ghost_y + 1
    let c = check_contact(
      game.grid, grid_width, grid_height,
      shape, game.pos_x, new_y)
    if c {
      break
    }
    ghost_y = new_y
  }

  // draw ghost
  draw_tetronimo(
    view, shape, [60, 60, 60, 255],
    tile_size, game.pos_x, ghost_y,
    rx, ry)

  // draw real tetronimo
  draw_tetronimo(
    view, shape, tet.colour,
    tile_size, game.pos_x, game.pos_y,
    rx, ry)

  present(view)
}
