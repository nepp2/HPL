
// code/.code

let prelude = get_module("code/core/prelude.code").unwrap()
let sdl2 = load_module("code/sdl2.code", [prelude])
let sdl2_example = load_module("code/sdl2_example.code", [prelude, sdl2],)
let update = sdl2_example.get_function("update") as fun()
let terminate = sdl2_example.get_function("terminate") as fun()

let timer = start_timer()
let watcher = create_watcher(100)

watcher.watch_file("code/sdl2_example.code")

while true {
  // process any watcher events
  let start_time = timer.millis_elapsed()
  while true {
    let path = watcher.poll_watcher_event()
    if path.is_some {
      let path = path.val
      // handle event
      print(path); println(" changed!")
      terminate()
      unload_module(sdl2_example)
      sdl2_example = load_module("code/sdl2_example.code", [prelude, sdl2])
      update = sdl2_example.get_function("update") as fun()
      terminate = sdl2_example.get_function("terminate") as fun()
    }
    else { break }
  }
  // call the update function
  update()
  // sleep for the rest of the frame
  let end_time = timer.millis_elapsed()
  let elapsed = (end_time - start_time) as i64
  let sleep_time = max(16 - elapsed, 0)
  thread_sleep(sleep_time as u64)
}
