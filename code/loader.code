  
let prelude = get_module("prelude").unwrap()
let sdl2 = load_module([prelude], "sdl2")
let sdl2_example = load_module([prelude, sdl2], "sdl2_example")
let update = sdl2_example.get_function("update") as fun()

while true {
  update()
  thread_sleep(16 as u64)
}

struct watcher_event {
  bloop : i32
  // ...
}

struct timer_handle {
  _ : ptr(u8)
}

cbind start_timer : fun() => timer_handle
cbind drop_timer : fun(timer_handle)
cbind millis_elapsed : fun(timer_handle) => u64
cbind poll_watcher_event : fun(ptr(watcher_event)) => bool

static timer = start_timer()

fun poll_watcher_events() {
  let start_time = timer.millis_elapsed()
  let s = sizeof(watcher_event)
  let event = malloc(s) as ptr(watcher_event)
  while poll_watcher_event(event) {
    // handle event
  }
  // sleep for the rest of the frame
  let end_time = timer.millis_elapsed()
  let elapsed = (end_time - start_time) as i64
  let sleep_time = max(16 - elapsed, 0)
  thread_sleep(sleep_time as u64)
}
