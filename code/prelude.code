
struct range {
  start : i64
  limit : i64
}

struct string {
  data : ptr(u8)
  length : u64
}

cbind malloc : fun(size: u32) => ptr(u8)

struct lib_handle {
  handle : u64
}

cbind load_library : fun(name : ptr(string)) => lib_handle

cbind load_symbol : fun(handle : lib_handle, name : ptr(string)) => ptr(u8)

cbind print : fun(s : ptr(string))

// overload as workaround for ABI issue
fun print(s : string) {
  print(ref s)
}

cbind thread_sleep : fun(millis : u64)

cbind compiler : ptr(u8)

// cbind prelude : ptr(u8)

cbind load_quote : fun(compiler : ptr(u8), name : ptr(string)) => ptr(expr)

fun max(a : i64, b : i64) {
  if a > b { a } else { b }
}

struct text_marker {
  line : u64
  col : u64
}

struct text_location {
  from : text_marker
  to : text_marker
}

union expr_data {
  s : string
  f : f64
  i : i64
  b : bool
}

struct expr_tag {
  tag : u8
  data : expr_data
}

struct expr_array {
  data : ptr(expr)
  length : u64
}

struct expr {
  children : expr_array
  loc : text_location
  tag : expr_tag
}

struct module_handle {
  id : u64
}

cbind print_expr : fun(e : ptr(expr))

cbind build_module : fun(compiler : ptr(u8), expr : ptr(expr)) => module_handle

fun build_module(expr : ptr(expr)) {
  build_module(compiler, expr)
}

cbind get_function :
  fun(compiler : ptr(u8), module : module_handle, name : ptr(string))
  => ptr(u8)

fun get_function(module : module_handle, name : string) {
  get_function(compiler, module, ref name)
}
