
struct range {
  start : i64
  limit : i64
}

struct string {
  data : ptr(u8)
  length : u64
}

cbind malloc : fun(size: u32) => ptr(u8)

struct lib_handle {
  handle : u64
}

cbind load_library : fun(name : ptr(string)) => lib_handle

cbind load_symbol : fun(handle : lib_handle, name : ptr(string)) => ptr(u8)

cbind print_string : fun(s : ptr(string)) // ptr due to ABI issue
cbind print_expr : fun(e : ptr(expr))
cbind print_i64 : fun(v : i64)
cbind print_u64 : fun(v : u64)
cbind print_f64 : fun(v : f64)
cbind print_bool : fun(v : bool)

fun print(s : string) { print_string(ref s) }
fun print(v : i64) { print_i64(v) }
fun print(v : u64) { print_u64(v) }
fun print(v : f64) { print_f64(v) }
fun print(v : bool) { print_bool(v) }
fun print(e : ptr(expr)) { print_expr(e) }
fun println() { print("\n") }

cbind thread_sleep : fun(millis : u64)

cbind compiler : ptr(u8)

// cbind prelude : ptr(u8)

cbind load_quote : fun(compiler : ptr(u8), name : ptr(string)) => ptr(expr)

fun max(a : i64, b : i64) {
  if a > b { a } else { b }
}

struct text_marker {
  line : u64
  col : u64
}

struct text_location {
  start : text_marker
  end: text_marker
}

union expr_data {
  list : expr_list
  symbol : string
  literal_string : string
  literal_float : f64
  literal_int : i64
  literal_bool : bool
}

union expr_list {
  s : string
  array : expr_array
}

let list_tag = 0 as u8
let symbol_tag = 1 as u8
let literal_string_tag = 2 as u8
let literal_float_tag = 3 as u8
let literal_int_tag = 4 as u8
let literal_bool_tag = 5 as u8
let literal_unit_tag = 6 as u8

fun sym(s : string, loc : text_location) {
  let data = expr_data.new(symbol: s)
  let c = expr_content.new(symbol_tag, data)
  expr.new(loc, c)
}

fun sym(i : i64, loc : text_location) {
  let data = expr_data.new(literal_int: i)
  let data = expr_data.new(literal_int: i)
  print("loc: ") ; print(loc.start.line) ; println()
  let c = expr_content.new(literal_int_tag, data)
  expr.new(loc, c)
}

struct expr_content {
  tag : u8
  data : expr_data
}

struct expr_array {
  data : ptr(expr)
  length : u64
}

struct expr {
  loc : text_location
  content : expr_content
}

struct module_handle {
  id : u64
}

cbind template_quote : fun(e : ptr(expr), args : ptr(array(ptr(expr)))) => ptr(expr)

fun template_quote(e : ptr(expr), args : array(ptr(expr))) {
  template_quote(e, ref args)
}

cbind build_module : fun(compiler : ptr(u8), expr : ptr(expr)) => module_handle

fun build_module(expr : ptr(expr)) {
  build_module(compiler, expr)
}

cbind get_function :
  fun(compiler : ptr(u8), module : module_handle, name : ptr(string))
  => ptr(u8)

fun get_function(module : module_handle, name : string) {
  get_function(compiler, module, ref name)
}
