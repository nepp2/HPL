
cbind malloc : fun(size: u64) => ptr(u8)
cbind free : fun(ptr: ptr(u8))
cbind memcpy : fun(dest : ptr(u8), src : ptr(u8), length : u64) => ptr(u8)
cbind panic : fun(s : ptr(string))

fun panic(s : string) {
  panic(&s)
}

struct range {
  start : i64
  limit : i64
}

fun range(start, limit) {
  range.new(start, limit)
}

struct range_iter {
  val : i64
  limit : i64
}

fun iter(r : range) {
  range_iter.new(r.start, r.limit)
}

fun next(it : ptr(range_iter), i : ptr(i64)) {
  if it.val < it.limit {
    *i = it.val
    it.val = it.val + 1
    true
  }
  else { false }
}

struct string {
  data : ptr(u8)
  length : u64
}

fun +(a : string, b : string) {
 let length = a.length + b.length
 let data = malloc(length)
 memcpy(data, a.data, a.length)
 memcpy(&data[a.length as i64], b.data, b.length)
 string.new(data, length)
}

struct lib_handle {
  handle : u64
}

cbind load_library : fun(name : ptr(string)) => lib_handle

cbind load_symbol : fun(handle : lib_handle, name : ptr(string)) => ptr(u8)

cbind print_string : fun(s : ptr(string)) // ptr due to ABI issue
cbind print_expr : fun(e : ptr(expr))
cbind print_i64 : fun(v : i64)
cbind print_u64 : fun(v : u64)
cbind print_f64 : fun(v : f64)
cbind print_bool : fun(v : bool)

fun print(s : string) { print_string(&s) }
fun print(v : i64) { print_i64(v) }
fun print(v : u64) { print_u64(v) }
fun print(v : f64) { print_f64(v) }
fun print(v : bool) { print_bool(v) }
fun print(e : ptr(expr)) { print_expr(e) }
fun println() { print("\n") }

cbind thread_sleep : fun(millis : u64)

cbind compiler : ptr(u8)

// cbind prelude : ptr(u8)

fun max(a : i64, b : i64) {
  if a > b { a } else { b }
}

struct text_marker {
  line : u64
  col : u64
}

struct text_location {
  start : text_marker
  end: text_marker
}

type expr_data = union(expr_list, string, f64, i64, bool);

struct expr_list {
  s : string
  array : expr_array
}

static list_tag : u64 = 0
static symbol_tag : u64 = 1
static literal_string_tag : u64 = 2
static literal_float_tag : u64 = 3
static literal_int_tag : u64 = 4
static literal_bool_tag : u64 = 5
static literal_unit_tag : u64 = 6

fun sym(e : ptr(expr), loc : text_location) {
  *e
}

fun sym(s : string, loc : text_location) {
  let c = expr_content.new(symbol_tag, s as expr_data)
  expr.new(loc, c)
}

fun sym(i : i64, loc : text_location) {
  let c = expr_content.new(literal_int_tag, i as expr_data)
  expr.new(loc, c)
}

// This style of tagged union is not really correct! It happens to work here
// because a u64 tag never triggers padding, but it will break if I change the
// tag to u8. To use a u8 tag I'd need to create a struct for each variant with
// the tag on each, and then a union of those structs. This can result in a
// more compact representation, but it's also a lot more boilerplate.
struct expr_content {
  tag : u64
  data : union(expr_list, string, f64, i64, bool)
}

struct expr_array {
  data : ptr(expr)
  length : u64
}

struct expr {
  loc : text_location
  content : expr_content
}

struct module_handle {
  module_id : u64
}

cbind expr_to_string : fun(out : ptr(string), e : ptr(expr))

fun to_string(e : ptr(expr)) {
  let out = string.new(0 as u64 as ptr(u8), 0 as u64)
  expr_to_string(&out, e)
  out
}

cbind template_quote : fun(e : ptr(expr), args : ptr(array(ptr(expr)))) => ptr(expr)

fun template_quote(e : ptr(expr), args : array(ptr(expr))) {
  template_quote(e, &args)
}

cbind load_expression : fun(compiler : ptr(u8), name : ptr(string)) => ptr(expr)

fun load_expression(name) {
  load_expression(compiler, &name)
}

cbind build_module : fun(compiler : ptr(u8), expr : ptr(expr)) => module_handle

fun build_module(expr : ptr(expr)) {
  build_module(compiler, expr)
}

cbind get_function :
  fun(compiler : ptr(u8), module : module_handle, name : ptr(string)) => ptr(u8)

fun get_function(module : module_handle, name : string) {
  get_function(compiler, module, &name)
}

print("Prelude loaded."); println()
