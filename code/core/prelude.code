
// ######## Core functions ########

cbind malloc64 : fun(size: u64) => ptr(u8)
cbind free : fun(ptr: ptr(u8))
cbind memcpy : fun(dest : ptr(u8), src : ptr(u8), length : u64) => ptr(u8)
cbind panic : fun(s : ptr(string))
cbind thread_sleep : fun(millis : u64)

fun malloc(size) { malloc64(size) }

fun panic(s : string) {
  panic(&s)
}

fun len(a : array(T)) => u64 with T {
  a.length
}

fun +(a : string, b : string) {
 let length = a.length + b.length
 let data = malloc(length)
 memcpy(data, a.data, a.length)
 memcpy(&data[a.length as i64], b.data, b.length)
 string.new(data, length)
}

// ######## Iterators for loops ########

struct range(Int) {
  start : Int
  limit : Int
}

fun range(start : Int, limit : Int) => range(Int) with Int {
  range.new(start, limit)
}

struct range_iter(Int) {
  val : Int
  limit : Int
}

fun iter(r : range(Int)) => range_iter(Int) with Int {
  range_iter.new(r.start, r.limit)
}

fun next(it : ptr(range_iter(Int)), i : ptr(Int)) => bool with Int {
  if it.val < it.limit {
    *i = it.val
    it.val = it.val + 1
    true
  }
  else { false }
}

struct array_iter(T) {
  a : array(T)
  i : u64
}

fun iter(a : array(T)) => array_iter(T) with T {
  array_iter.new(a, 0)
}

fun next(it : ptr(array_iter(T)), element : ptr(T)) => bool with T {
  if it.i < it.a.len() {
    *element = it.a[it.i]
    it.i = it.i + 1
    true
  }
  else { false }
}

// ######## Shared library stuff (dll/so files) ########

struct lib_handle {
  handle : u64
}

cbind load_library : fun(name : ptr(string)) => lib_handle
cbind load_symbol : fun(handle : lib_handle, name : ptr(string)) => ptr(u8)

// ######## Print functions ########

cbind print_string : fun(s : ptr(string)) // ptr due to ABI issue
cbind print_i64 : fun(v : i64)
cbind print_u64 : fun(v : u64)
cbind print_f64 : fun(v : f64)
cbind print_bool : fun(v : bool)

fun print(s : string) { print_string(&s) }
fun print(v : i64) { print_i64(v) }
fun print(v : i32) { print_i64(v as i64) }
fun print(v : u64) { print_u64(v) }
fun print(v : u32) { print_u64(v as u64) }
fun print(v : u16) { print_u64(v as u64) }
fun print(v : u8) { print_u64(v as u64) }
fun print(v : f64) { print_f64(v) }
fun print(v : bool) { print_bool(v) }
fun println() { print("\n") }

fun println(t : T) with T {
  print(t); println()
}

// ######## Convenience functions ########

fun max(a : T, b : T) => T with T {
  if a > b { a } else { b }
}

fun min(a : T, b : T) => T with T {
  if a < b { a } else { b }
}

fun alloc(v : T) => ptr(T) with T {
  let p = malloc(sizeof(T)) as ptr(T)
  *p = v
  p
}

fun dealloc(p : ptr(T)) => () with T {
  free(p as ptr(u8))
}

// ######## Tuples ########

struct tup2(V0, V1) {
  v0 : V0 ; v1 : V1
}
struct tup3(V0, V1, V2) {
  v0 : V0 ; v1 : V1 ; v2 : V2
}
struct tup4(V0, V1, V2, V3) {
  v0 : V0 ; v1 : V1 ; v2 : V2; v3 : V3
}
struct tup5(V0, V1, V2, V3, V4) {
  v0 : V0 ; v1 : V1 ; v2 : V2; v3 : V3; v4 : V4
}
struct tup6(V0, V1, V2, V3, V4, V5) {
  v0 : V0 ; v1 : V1 ; v2 : V2; v3 : V3; v4 : V4; v5 : V5
}

fun tup(v0 : V0, v1 : V1)
  => tup2(V0, V1)
  with V0, V1
{
  tup2.new(v0, v1)
}
fun tup(v0 : V0, v1 : V1, v2 : V2)
  => tup3(V0, V1, V2)
  with V0, V1, V2
{
  tup3.new(v0, v1, v2)
}
fun tup(v0 : V0, v1 : V1, v2 : V2, v3 : V3)
  => tup4(V0, V1, V2, V3)
  with V0, V1, V2, V3
{
  tup4.new(v0, v1, v2, v3)
}
fun tup(v0 : V0, v1 : V1, v2 : V2, v3 : V3, v4 : V4)
  => tup5(V0, V1, V2, V3, V4)
  with V0, V1, V2, V3, V4
{
  tup5.new(v0, v1, v2, v3, v4)
}
fun tup(v0 : V0, v1 : V1, v2 : V2, v3 : V3, v4 : V4, v5 : V5)
  => tup6(V0, V1, V2, V3, V4, V5)
  with V0, V1, V2, V3, V4, V5
{
  tup6.new(v0, v1, v2, v3, v4, v5)
}

fun print(t : tup2(V0, V1)) with V0, V1 {
  print("(")
  print(t.v0)
  print(", ");
  print(t.v1)
  print(")")
}
fun print(t : tup3(V0, V1, V2)) with V0, V1, V2 {
  print("(")
  print(t.v0)
  print(", ");
  print(t.v1)
  print(", ");
  print(t.v2)
  print(")")
}

// ######## Option type ########

struct option(T) {
  is_some : bool
  val : T
}

fun some(val : T) => option(T) with T {
  option.new(is_some: true, val)
}

fun none() => option(T) with T {
  option.new(is_some: false, val: UnsafeZeroInit())
}

fun unwrap(o : option(T)) => T with T {
  if !o.is_some {
    panic("tried to unwrap empty option")
  }
  o.val
}

// ######## Timer stuff ########

struct timer_handle {
  _ : ptr(u8)
}

cbind start_timer : fun() => timer_handle
cbind drop_timer : fun(timer_handle)
cbind millis_elapsed : fun(timer_handle) => u64

// ######## Watcher stuff ########

struct watcher_handle {
  _ : ptr(u8)
}

cbind poll_watcher_event : fun(w: watcher_handle, path_out : ptr(option(string)))
cbind create_watcher : fun(millisecond_interval : u64) => watcher_handle
cbind drop_watcher : fun(w : watcher_handle)
cbind watch_file : fun(w : watcher_handle, path : ptr(string))

fun poll_watcher_event(w: watcher_handle) => option(string) {
  let out = none() ; poll_watcher_event(w, &out) ; out
}

fun watch_file(w : watcher_handle, path : string) {
  watch_file(w, &path)
}

// ######## RNG stuff ########

struct rng_handle {
  _ : ptr(u8)
}

cbind seeded_rng : fun(seed : u64) => rng_handle
cbind drop_seeded_rng : fun(rng : rng_handle)
cbind rand_f64 : fun(rng : rng_handle) => f64
cbind rand_u64 : fun(rng : rng_handle) => u64
